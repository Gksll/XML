<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azure.Identity</name>
    </assembly>
    <members>
        <member name="T:Azure.Identity.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Identity.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Azure.Identity.AsyncLockWithValue`1.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Azure.Identity.AsyncLockWithValue`1.Reset">
            <summary>
            Release the lock and allow next waiter acquire it
            </summary>
        </member>
        <member name="T:Azure.Identity.AuthenticationFailedException">
            <summary>
            An exception class raised for errors in authenticating client requests.
            </summary>
        </member>
        <member name="M:Azure.Identity.AuthenticationFailedException.#ctor(System.String)">
            <summary>
            Creates a new AuthenticationFailedException with the specified message.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
        </member>
        <member name="M:Azure.Identity.AuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new AuthenticationFailedException with the specified message.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
            <param name="innerException">The exception underlying the authentication failure.</param>
        </member>
        <member name="T:Azure.Identity.AuthenticationRecord">
            <summary>
            Account information relating to an authentication request.
            </summary>
        </member>
        <member name="P:Azure.Identity.AuthenticationRecord.Username">
            <summary>
            The user principal or service principal name of the account.
            </summary>
        </member>
        <member name="P:Azure.Identity.AuthenticationRecord.Authority">
            <summary>
            The authority host used to authenticate the account.
            </summary>
        </member>
        <member name="P:Azure.Identity.AuthenticationRecord.HomeAccountId">
            <summary>
            A unique identifier of the account.
            </summary>
        </member>
        <member name="P:Azure.Identity.AuthenticationRecord.TenantId">
            <summary>
            The tenant the account should authenticate in.
            </summary>
        </member>
        <member name="P:Azure.Identity.AuthenticationRecord.ClientId">
            <summary>
            The client id of the application which performed the original authentication
            </summary>
        </member>
        <member name="M:Azure.Identity.AuthenticationRecord.Serialize(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Serializes the <see cref="T:Azure.Identity.AuthenticationRecord"/> to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> which the serialized <see cref="T:Azure.Identity.AuthenticationRecord"/> will be written to.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Identity.AuthenticationRecord.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Serializes the <see cref="T:Azure.Identity.AuthenticationRecord"/> to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which the serialized <see cref="T:Azure.Identity.AuthenticationRecord"/> will be written.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Identity.AuthenticationRecord.Deserialize(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the <see cref="T:Azure.Identity.AuthenticationRecord"/> from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the serialized <see cref="T:Azure.Identity.AuthenticationRecord"/> will be read.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Identity.AuthenticationRecord.DeserializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes the <see cref="T:Azure.Identity.AuthenticationRecord"/> from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the serialized <see cref="T:Azure.Identity.AuthenticationRecord"/> will be read.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
        </member>
        <member name="T:Azure.Identity.AuthenticationRequiredException">
            <summary>
            An exception indicating that interactive authentication is required.
            </summary>
        </member>
        <member name="M:Azure.Identity.AuthenticationRequiredException.#ctor(System.String,Azure.Core.TokenRequestContext)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.AuthenticationRequiredException"/> with the specified message and context.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
            <param name="context">The details of the authentication request.</param>
        </member>
        <member name="M:Azure.Identity.AuthenticationRequiredException.#ctor(System.String,Azure.Core.TokenRequestContext,System.Exception)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.AuthenticationRequiredException"/> with the specified message, context and inner exception.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
            <param name="context">The details of the authentication request.</param>
            <param name="innerException">The exception underlying the authentication failure.</param>
        </member>
        <member name="P:Azure.Identity.AuthenticationRequiredException.TokenRequestContext">
            <summary>
            The details of the authentication request which resulted in the authentication failure.
            </summary>
        </member>
        <member name="T:Azure.Identity.AuthorizationCodeCredential">
            <summary>
            Authenticates by redeeming and authorization code previously obtained from Azure Active Directory.  See
            https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow for more information
            about the autorization code authentication flow.
            </summary>
        </member>
        <member name="M:Azure.Identity.AuthorizationCodeCredential.#ctor">
            <summary>
            Protected constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Identity.AuthorizationCodeCredential.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the ClientSecretCredential with the details needed to authenticate against Azure Active Directory with a prefetched authorization code.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientSecret">A client secret that was generated for the App Registration used to authenticate the client.</param>
            <param name="authorizationCode">The authorization code obtained from a call to authorize. The code should be obtained with all required scopes.
            See https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow for more information.</param>
        </member>
        <member name="M:Azure.Identity.AuthorizationCodeCredential.#ctor(System.String,System.String,System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the ClientSecretCredential with the details needed to authenticate against Azure Active Directory with a prefetched authorization code.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientSecret">A client secret that was generated for the App Registration used to authenticate the client.</param>
            <param name="authorizationCode">The authorization code obtained from a call to authorize. The code should be obtained with all required scopes.
            See https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow for more information.</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.AuthorizationCodeCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified authorization code authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.AuthorizationCodeCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified authorization code authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.AzureAuthorityHosts">
            <summary>
            Defines fields exposing the well known authority hosts for the Azure Public Cloud and sovereign clouds.
            </summary>
        </member>
        <member name="P:Azure.Identity.AzureAuthorityHosts.AzurePublicCloud">
            <summary>
            The host of the Azure Active Directory authority for tenants in the Azure Public Cloud.
            </summary>
        </member>
        <member name="P:Azure.Identity.AzureAuthorityHosts.AzureChina">
            <summary>
            The host of the Azure Active Directory authority for tenants in the Azure China Cloud.
            </summary>
        </member>
        <member name="P:Azure.Identity.AzureAuthorityHosts.AzureGermany">
            <summary>
            The host of the Azure Active Directory authority for tenants in the Azure German Cloud.
            </summary>
        </member>
        <member name="P:Azure.Identity.AzureAuthorityHosts.AzureGovernment">
            <summary>
            The host of the Azure Active Directory authority for tenants in the Azure US Government Cloud.
            </summary>
        </member>
        <member name="T:Azure.Identity.AzureCliCredential">
            <summary>
            Enables authentication to Azure Active Directory using Azure CLI to obtain an access token.
            </summary>
        </member>
        <member name="M:Azure.Identity.AzureCliCredential.#ctor">
            <summary>
            Create an instance of CliCredential class.
            </summary>
        </member>
        <member name="M:Azure.Identity.AzureCliCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a access token from Azure CLI credential, using this access token to authenticate. This method called by Azure SDK clients.
            </summary>
            <param name="requestContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Azure.Identity.AzureCliCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a access token from Azure CLI service, using the access token to authenticate. This method id called by Azure SDK clients.
            </summary>
            <param name="requestContext"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Azure.Identity.ChainedTokenCredential">
            <summary>
            Provides a <see cref="T:Azure.Core.TokenCredential"/> implementation which chains multiple <see cref="T:Azure.Core.TokenCredential"/> implementations to be tried in order
            until one of the getToken methods returns a non-default <see cref="T:Azure.Core.AccessToken"/>.
            </summary>
        </member>
        <member name="M:Azure.Identity.ChainedTokenCredential.#ctor">
            <summary>
            Constructor for instrumenting in tests
            </summary>
        </member>
        <member name="M:Azure.Identity.ChainedTokenCredential.#ctor(Azure.Core.TokenCredential[])">
            <summary>
            Creates an instance with the specified <see cref="T:Azure.Core.TokenCredential"/> sources.
            </summary>
            <param name="sources">The ordered chain of <see cref="T:Azure.Core.TokenCredential"/> implementations to tried when calling <see cref="M:Azure.Identity.ChainedTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> or <see cref="M:Azure.Identity.ChainedTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/></param>
        </member>
        <member name="M:Azure.Identity.ChainedTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Sequentially calls <see cref="M:Azure.Core.TokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> on all the specified sources, returning the first successfully obtained <see cref="T:Azure.Core.AccessToken"/>. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The first <see cref="T:Azure.Core.AccessToken"/> returned by the specified sources. Any credential which raises a <see cref="T:Azure.Identity.CredentialUnavailableException"/> will be skipped.</returns>
        </member>
        <member name="M:Azure.Identity.ChainedTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Sequentially calls <see cref="M:Azure.Core.TokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> on all the specified sources, returning the first successfully obtained <see cref="T:Azure.Core.AccessToken"/>. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The first <see cref="T:Azure.Core.AccessToken"/> returned by the specified sources. Any credential which raises a <see cref="T:Azure.Identity.CredentialUnavailableException"/> will be skipped.</returns>
        </member>
        <member name="T:Azure.Identity.ClientCertificateCredential">
            <summary>
            Enables authentication of a service principal in to Azure Active Directory using a X509 certificate that is assigned to it's App Registration. More information
            on how to configure certificate authentication can be found here:
            https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-certificate-credentials#register-your-certificate-with-azure-ad
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientCertificateCredential.TenantId">
            <summary>
            Gets the Azure Active Directory tenant (directory) Id of the service principal
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientCertificateCredential.ClientId">
            <summary>
            Gets the client (application) ID of the service principal
            </summary>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor">
            <summary>
            Protected constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificatePath">The path to a file which contains both the client certificate and private key.</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificatePath">The path to a file which contains both the client certificate and private key.</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.String,Azure.Identity.ClientCertificateCredentialOptions)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificatePath">The path to a file which contains both the client certificate and private key.</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificate">The authentication X509 Certificate of the service principal</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificate">The authentication X509 Certificate of the service principal</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Identity.ClientCertificateCredentialOptions)">
            <summary>
            Creates an instance of the ClientCertificateCredential with the details needed to authenticate against Azure Active Directory with the specified certificate.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientCertificate">The authentication X509 Certificate of the service principal</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified X509 certificate to authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.ClientCertificateCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified X509 certificate to authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.ClientCertificateCredential.IX509Certificate2Provider">
            <summary>
            IX509Certificate2Provider provides a way to control how the X509Certificate2 object is fetched.
            </summary>
        </member>
        <member name="T:Azure.Identity.ClientCertificateCredential.X509Certificate2FromObjectProvider">
            <summary>
            X509Certificate2FromObjectProvider provides an X509Certificate2 from an existing instance.
            </summary>
        </member>
        <member name="T:Azure.Identity.ClientCertificateCredential.X509Certificate2FromFileProvider">
            <summary>
            X509Certificate2FromFileProvider provides an X509Certificate2 from a file on disk.  It supports both
            "pfx" and "pem" encoded certificates.
            </summary>
        </member>
        <member name="T:Azure.Identity.ClientCertificateCredentialOptions">
            <summary>
            Options used to configure the <see cref="T:Azure.Identity.ClientCertificateCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientCertificateCredentialOptions.EnablePersistentCache">
            <summary>
            If set to true the credential will store tokens in a cache persisted to the machine, protected to the current user, which can be shared by other credentials and processes.
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientCertificateCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientCertificateCredentialOptions.SendCertificateChain">
            <summary>
            Will include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the <see cref="T:Azure.Identity.ClientCertificateCredential"/>.
            </summary>
        </member>
        <member name="T:Azure.Identity.ClientSecretCredential">
            <summary>
            Enables authentication to Azure Active Directory using a client secret that was generated for an App Registration. More information on how
            to configure a client secret can be found here:
            https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientSecretCredential.TenantId">
            <summary>
            Gets the Azure Active Directory tenant (directory) Id of the service principal
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientSecretCredential.ClientId">
            <summary>
            Gets the client (application) ID of the service principal
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientSecretCredential.ClientSecret">
            <summary>
            Gets the client secret that was generated for the App Registration used to authenticate the client.
            </summary>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.#ctor">
            <summary>
            Protected constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the ClientSecretCredential with the details needed to authenticate against Azure Active Directory with a client secret.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientSecret">A client secret that was generated for the App Registration used to authenticate the client.</param>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.#ctor(System.String,System.String,System.String,Azure.Identity.ClientSecretCredentialOptions)">
            <summary>
            Creates an instance of the ClientSecretCredential with the details needed to authenticate against Azure Active Directory with a client secret.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientSecret">A client secret that was generated for the App Registration used to authenticate the client.</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.#ctor(System.String,System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the ClientSecretCredential with the details needed to authenticate against Azure Active Directory with a client secret.
            </summary>
            <param name="tenantId">The Azure Active Directory tenant (directory) Id of the service principal.</param>
            <param name="clientId">The client (application) ID of the service principal</param>
            <param name="clientSecret">A client secret that was generated for the App Registration used to authenticate the client.</param>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified client secret to authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.ClientSecretCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified client secret to authenticate. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.ClientSecretCredentialOptions">
            <summary>
            Options used to configure the <see cref="T:Azure.Identity.ClientSecretCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientSecretCredentialOptions.EnablePersistentCache">
            <summary>
            If set to true the credential will store tokens in a persistent cache shared by other credentials.
            </summary>
        </member>
        <member name="P:Azure.Identity.ClientSecretCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="T:Azure.Identity.CredentialUnavailableException">
            <summary>
            An exception indicating a <see cref="T:Azure.Core.TokenCredential"/> did not attempt to authenticate and retrieve <see cref="T:Azure.Core.AccessToken"/>, as its prerequisite information or state was not available.
            </summary>
        </member>
        <member name="M:Azure.Identity.CredentialUnavailableException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.CredentialUnavailableException"/> with the specified message.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
        </member>
        <member name="M:Azure.Identity.CredentialUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.CredentialUnavailableException"/> with the specified message.
            </summary>
            <param name="message">The message describing the authentication failure.</param>
            <param name="innerException">The exception underlying the authentication failure.</param>
        </member>
        <member name="T:Azure.Identity.DefaultAzureCredential">
            <summary>
            Provides a default <see cref="T:Azure.Core.TokenCredential"/> authentication flow for applications that will be deployed to Azure.  The following credential
            types if enabled will be tried, in order:
            <list type="bullet">
            <item><description><see cref="T:Azure.Identity.EnvironmentCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.ManagedIdentityCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.SharedTokenCacheCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.VisualStudioCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.VisualStudioCodeCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.AzureCliCredential"/></description></item>
            <item><description><see cref="T:Azure.Identity.InteractiveBrowserCredential"/></description></item>
            </list>
            Consult the documentation of these credential types for more information on how they attempt authentication.
            </summary>
            <remarks>
            Note that credentials requiring user interaction, such as the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>, are not included by default. Callers must explicitly enable this when
            constructing the <see cref="T:Azure.Identity.DefaultAzureCredential"/> either by setting the includeInteractiveCredentials parameter to true, or the setting the
            <see cref="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeInteractiveBrowserCredential"/> property to false when passing <see cref="T:Azure.Identity.DefaultAzureCredentialOptions"/>.
            </remarks>
        </member>
        <member name="M:Azure.Identity.DefaultAzureCredential.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the DefaultAzureCredential class.
            </summary>
            <param name="includeInteractiveCredentials">Specifies whether credentials requiring user interaction will be included in the default authentication flow.</param>
        </member>
        <member name="M:Azure.Identity.DefaultAzureCredential.#ctor(Azure.Identity.DefaultAzureCredentialOptions)">
            <summary>
            Creates an instance of the <see cref="T:Azure.Identity.DefaultAzureCredential"/> class.
            </summary>
            <param name="options">Options that configure the management of the requests sent to Azure Active Directory services, and determine which credentials are included in the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.</param>
        </member>
        <member name="M:Azure.Identity.DefaultAzureCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Sequentially calls <see cref="M:Azure.Core.TokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> on all the included credentials in the order <see cref="T:Azure.Identity.EnvironmentCredential"/>, <see cref="T:Azure.Identity.ManagedIdentityCredential"/>, <see cref="T:Azure.Identity.SharedTokenCacheCredential"/>,
            and <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> returning the first successfully obtained <see cref="T:Azure.Core.AccessToken"/>. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <remarks>
            Note that credentials requiring user interaction, such as the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>, are not included by default.
            </remarks>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The first <see cref="T:Azure.Core.AccessToken"/> returned by the specified sources. Any credential which raises a <see cref="T:Azure.Identity.CredentialUnavailableException"/> will be skipped.</returns>
        </member>
        <member name="M:Azure.Identity.DefaultAzureCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Sequentially calls <see cref="M:Azure.Core.TokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> on all the included credentials in the order <see cref="T:Azure.Identity.EnvironmentCredential"/>, <see cref="T:Azure.Identity.ManagedIdentityCredential"/>, <see cref="T:Azure.Identity.SharedTokenCacheCredential"/>,
            and <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> returning the first successfully obtained <see cref="T:Azure.Core.AccessToken"/>. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <remarks>
            Note that credentials requiring user interaction, such as the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>, are not included by default.
            </remarks>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The first <see cref="T:Azure.Core.AccessToken"/> returned by the specified sources. Any credential which raises a <see cref="T:Azure.Identity.CredentialUnavailableException"/> will be skipped.</returns>
        </member>
        <member name="T:Azure.Identity.DefaultAzureCredentialOptions">
            <summary>
            Options to configure the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow and requests made to Azure Identity services.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.InteractiveBrowserTenantId">
            <summary>
            The tenant id of the user to authenticate, in the case the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authenticates through, the
            <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>. The default is null and will authenticate users to their default tenant.
            The value can also be set by setting the environment variable AZURE_TENANT_ID.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.SharedTokenCacheTenantId">
            <summary>
            Specifies the tenant id of the preferred authentication account, to be retrieved from the shared token cache for single sign on authentication with
            development tools, in the case multiple accounts are found in the shared token.
            </summary>
            <remarks>
            If multiple accounts are found in the shared token cache and no value is specified, or the specified value matches no accounts in
            the cache the SharedTokenCacheCredential will not be used for authentication.
            </remarks>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.VisualStudioTenantId">
            <summary>
            The tenant id of the user to authenticate, in the case the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authenticates through, the
            <see cref="T:Azure.Identity.VisualStudioCredential"/>. The default is null and will authenticate users to their default tenant.
            The value can also be set by setting the environment variable AZURE_TENANT_ID.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.VisualStudioCodeTenantId">
            <summary>
            The tenant id of the user to authenticate, in the case the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authenticates through, the
            <see cref="T:Azure.Identity.VisualStudioCodeCredential"/>. The default is null and will authenticate users to their default tenant.
            The value can also be set by setting the environment variable AZURE_TENANT_ID.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.SharedTokenCacheUsername">
            <summary>
            Specifies the preferred authentication account to be retrieved from the shared token cache for single sign on authentication with
            development tools. In the case multiple accounts are found in the shared token.
            </summary>
            <remarks>
            If multiple accounts are found in the shared token cache and no value is specified, or the specified value matches no accounts in
            the cache the SharedTokenCacheCredential will not be used for authentication.
            </remarks>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ManagedIdentityClientId">
            <summary>
            Specifies the client id of the azure ManagedIdentity in the case of user assigned identity.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeEnvironmentCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.EnvironmentCredential"/> will be excluded from the authentication flow. Setting to true disables reading
            authentication details from the process' environment variables.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeManagedIdentityCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.ManagedIdentityCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            Setting to true disables authenticating with managed identity endpoints.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeSharedTokenCacheCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.SharedTokenCacheCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            Setting to true disables single sign on authentication with development tools which write to the shared token cache.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeInteractiveBrowserCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            Setting to true disables launching the default system browser to authenticate in development environments.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeAzureCliCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.AzureCliCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeVisualStudioCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.VisualStudioCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            </summary>
        </member>
        <member name="P:Azure.Identity.DefaultAzureCredentialOptions.ExcludeVisualStudioCodeCredential">
            <summary>
            Specifies whether the <see cref="T:Azure.Identity.VisualStudioCodeCredential"/> will be excluded from the <see cref="T:Azure.Identity.DefaultAzureCredential"/> authentication flow.
            </summary>
        </member>
        <member name="T:Azure.Identity.DeviceCodeCredential">
            <summary>
            A <see cref="T:Azure.Core.TokenCredential"/> implementation which authenticates a user using the device code flow, and provides access tokens for that user account.
            For more information on the device code authentication flow see https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Device-Code-Flow.
            </summary>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.#ctor">
            <summary>
            Creates a new <see cref="T:Azure.Identity.DeviceCodeCredential"/>, which will authenticate users using the device code flow.
            </summary>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.#ctor(Azure.Identity.DeviceCodeCredentialOptions)">
            <summary>
             Creates a new <see cref="T:Azure.Identity.DeviceCodeCredential"/> with the specified options, which will authenticate users using the device code flow.
            </summary>
            <param name="options">The client options for the newly created <see cref="T:Azure.Identity.DeviceCodeCredential"/>.</param>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.#ctor(System.Func{Azure.Identity.DeviceCodeInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates a new DeviceCodeCredential with the specified options, which will authenticate users with the specified application.
            </summary>
            <param name="deviceCodeCallback">The callback to be executed to display the device code to the user</param>
            <param name="clientId">The client id of the application to which the users will authenticate</param>
            <param name="options">The client options for the newly created DeviceCodeCredential</param>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.#ctor(System.Func{Azure.Identity.DeviceCodeInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates a new DeviceCodeCredential with the specified options, which will authenticate users with the specified application.
            </summary>
            <param name="deviceCodeCallback">The callback to be executed to display the device code to the user</param>
            <param name="tenantId">The tenant id of the application to which users will authenticate.  This can be null for multi-tenanted applications.</param>
            <param name="clientId">The client id of the application to which the users will authenticate</param>
            <param name="options">The client options for the newly created DeviceCodeCredential</param>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.Authenticate(System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The result of the authentication request, containing the acquired <see cref="T:Azure.Core.AccessToken"/>, and the <see cref="T:Azure.Identity.AuthenticationRecord"/> which can be used to silently authenticate the account.</returns>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.AuthenticateAsync(System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> which can be used to silently authenticate the account on future execution if persistent caching was enabled via <see cref="P:Azure.Identity.DeviceCodeCredentialOptions.EnablePersistentCache"/> when credential was instantiated.</returns>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.Authenticate(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.AuthenticateAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token for a user account, authenticating them through the device code authentication flow. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.DeviceCodeCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token for a user account, authenticating them through the device code authentication flow. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.DeviceCodeCredentialOptions">
            <summary>
            Options to configure the <see cref="T:Azure.Identity.DeviceCodeCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.DisableAutomaticAuthentication">
            <summary>
            Prevents the <see cref="T:Azure.Identity.DeviceCodeCredential"/> from automatically prompting the user. If automatic authentication is disabled a AuthenticationRequiredException will be thrown from <see cref="M:Azure.Identity.DeviceCodeCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> and <see cref="M:Azure.Identity.DeviceCodeCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> in the case that
            user interaction is necessary. The application is responsible for handling this exception, and calling <see cref="M:Azure.Identity.DeviceCodeCredential.Authenticate(System.Threading.CancellationToken)"/> or <see cref="M:Azure.Identity.DeviceCodeCredential.AuthenticateAsync(System.Threading.CancellationToken)"/> to authenticate the user interactively.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.TenantId">
            <summary>
            The tenant ID the user will be authenticated to. If not specified the user will be authenticated to their home tenant.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.ClientId">
            <summary>
            The client ID of the application used to authenticate the user. If not specified the user will be authenticated with an Azure development application.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.EnablePersistentCache">
            <summary>
            If set to true the credential will store tokens in a cache persisted to the machine, protected to the current user, which can be shared by other credentials and processes.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.AuthenticationRecord">
            <summary>
            The <see cref="T:Azure.Identity.AuthenticationRecord"/> captured from a previous authentication.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeCredentialOptions.DeviceCodeCallback">
            <summary>
            The callback which will be executed to display the device code login details to the user. In not specified the device code and login instructions will be printed to the console.
            </summary>
        </member>
        <member name="T:Azure.Identity.DeviceCodeInfo">
            <summary>
            Details of the device code to present to a user to allow them to authenticate through the device code authentication flow.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.UserCode">
            <summary>
            User code returned by the service
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.DeviceCode">
            <summary>
            Device code returned by the service
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.VerificationUri">
            <summary>
            Verification URL where the user must navigate to authenticate using the device code and credentials.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.ExpiresOn">
            <summary>
            Time when the device code will expire.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.Message">
            <summary>
            User friendly text response that can be used for display purpose.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.ClientId">
            <summary>
            Identifier of the client requesting device code.
            </summary>
        </member>
        <member name="P:Azure.Identity.DeviceCodeInfo.Scopes">
            <summary>
            List of the scopes that would be held by token.
            </summary>
        </member>
        <member name="T:Azure.Identity.EnvironmentCredential">
            <summary>
            Enables authentication to Azure Active Directory using client secret, or username and password,
            details configured in the following environment variables:
            <list type="table">
            <listheader><term>Variable</term><description>Description</description></listheader>
            <item><term>AZURE_TENANT_ID</term><description>The Azure Active Directory tenant(directory) ID.</description></item>
            <item><term>AZURE_CLIENT_ID</term><description>The client(application) ID of an App Registration in the tenant.</description></item>
            <item><term>AZURE_CLIENT_SECRET</term><description>A client secret that was generated for the App Registration.</description></item>
            <item><term>AZURE_CLIENT_CERTIFICATE_PATH</term><description>A path to certificate and private key pair in PEM or PFX format, which can authenticate the App Registration.</description></item>
            <item><term>AZURE_USERNAME</term><description>The username, also known as upn, of an Azure Active Directory user account.</description></item>
            <item><term>AZURE_PASSWORD</term><description>The password of the Azure Active Directory user account. Note this does not support accounts with MFA enabled.</description></item>
            </list>
            This credential ultimately uses a <see cref="T:Azure.Identity.ClientSecretCredential"/> or <see cref="T:Azure.Identity.UsernamePasswordCredential"/> to
            perform the authentication using these details. Please consult the
            documentation of that class for more details.
            </summary>
        </member>
        <member name="M:Azure.Identity.EnvironmentCredential.#ctor">
            <summary>
            Creates an instance of the EnvironmentCredential class and reads client secret details from environment variables.
            If the expected environment variables are not found at this time, the GetToken method will return the default <see cref="T:Azure.Core.AccessToken"/> when invoked.
            </summary>
        </member>
        <member name="M:Azure.Identity.EnvironmentCredential.#ctor(Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the EnvironmentCredential class and reads client secret details from environment variables.
            If the expected environment variables are not found at this time, the GetToken method will return the default <see cref="T:Azure.Core.AccessToken"/> when invoked.
            </summary>
            <param name="options">Options that allow to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.EnvironmentCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified client details specified in the environment variables
            AZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET or AZURE_USERNAME and AZURE_PASSWORD to authenticate.
            This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <remarks>
            If the environment variables AZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET are not specified, the default <see cref="T:Azure.Core.AccessToken"/>
            </remarks>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.EnvironmentCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token from the Azure Active Directory service, using the specified client details specified in the environment variables
            AZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET or AZURE_USERNAME and AZURE_PASSWORD to authenticate.
            This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <remarks>
            If the environment variables AZURE_TENANT_ID, AZURE_CLIENT_ID, and AZURE_CLIENT_SECRET are not specifeid, the default <see cref="T:Azure.Core.AccessToken"/>
            </remarks>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls, or a default <see cref="T:Azure.Core.AccessToken"/>.</returns>
        </member>
        <member name="T:Azure.Identity.HttpPipelineClientFactory">
            <summary>
            This class is an HttpClient factory which creates an HttpClient which delegates it's transport to an HttpPipeline, to enable MSAL to send requests through an Azure.Core HttpPipeline.
            </summary>
        </member>
        <member name="T:Azure.Identity.HttpPipelineClientFactory.PipelineHttpMessageHandler">
            <summary>
            An HttpMessageHandler which delegates SendAsync to a specified HttpPipeline.
            </summary>
        </member>
        <member name="T:Azure.Identity.IdentityModelFactory">
            <summary>
            Model factory that enables mocking for the Azure Identity library.
            </summary>
        </member>
        <member name="M:Azure.Identity.IdentityModelFactory.AuthenticationRecord(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Identity.IdentityModelFactory.AuthenticationRecord(System.String,System.String,System.String,System.String,System.String)"/> class for mocking purposes.
            </summary>
            <param name="username">Sets the <see cref="P:Azure.Identity.AuthenticationRecord.Username"/>.</param>
            <param name="authority">Sets the <see cref="P:Azure.Identity.AuthenticationRecord.Authority"/>.</param>
            <param name="homeAccountId">Sets the <see cref="P:Azure.Identity.AuthenticationRecord.HomeAccountId"/>.</param>
            <param name="tenantId">Sets the <see cref="P:Azure.Identity.AuthenticationRecord.TenantId"/>.</param>
            <param name="clientId">Sets the <see cref="P:Azure.Identity.AuthenticationRecord.ClientId"/>.</param>
            <returns>A new instance of the <see cref="M:Azure.Identity.IdentityModelFactory.AuthenticationRecord(System.String,System.String,System.String,System.String,System.String)"/> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Identity.IdentityModelFactory.DeviceCodeInfo(System.String,System.String,System.Uri,System.DateTimeOffset,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Identity.IdentityModelFactory.DeviceCodeInfo(System.String,System.String,System.Uri,System.DateTimeOffset,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})"/> class for mocking purposes.
            </summary>
            <param name="userCode">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.UserCode"/>.</param>
            <param name="deviceCode">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.DeviceCode"/>.</param>
            <param name="verificationUri">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.VerificationUri"/>.</param>
            <param name="expiresOn">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.ExpiresOn"/>.</param>
            <param name="message">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.Message"/>.</param>
            <param name="clientId">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.ClientId"/>.</param>
            <param name="scopes">Sets the <see cref="P:Azure.Identity.DeviceCodeInfo.Scopes"/>.</param>
            <returns>A new instance of the <see cref="M:Azure.Identity.IdentityModelFactory.DeviceCodeInfo(System.String,System.String,System.Uri,System.DateTimeOffset,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})"/> for mocking purposes.</returns>
        </member>
        <member name="T:Azure.Identity.InteractiveBrowserCredential">
            <summary>
            A <see cref="T:Azure.Core.TokenCredential"/> implementation which launches the system default browser to interactively authenticate a user, and obtain an access token.
            The browser will only be launched to authenticate the user once, then will silently acquire access tokens through the users refresh token as long as it's valid.
            </summary>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.#ctor">
            <summary>
            Creates a new <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> with the specified options, which will authenticate users.
            </summary>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.#ctor(Azure.Identity.InteractiveBrowserCredentialOptions)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> with the specified options, which will authenticate users with the specified application.
            </summary>
            <param name="options">The client options for the newly created <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>.</param>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> with the specified options, which will authenticate users with the specified application.
            </summary>
            <param name="clientId">The client id of the application to which the users will authenticate</param>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.#ctor(System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> with the specified options, which will authenticate users with the specified application.
            </summary>
            <param name="tenantId">The tenant id of the application and the users to authenticate. Can be null in the case of multi-tenant applications.</param>
            <param name="clientId">The client id of the application to which the users will authenticate</param>
            TODO: need to link to info on how the application has to be created to authenticate users, for multiple applications
            <param name="options">The client options for the newly created <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>.</param>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.Authenticate(System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The result of the authentication request, containing the acquired <see cref="T:Azure.Core.AccessToken"/>, and the <see cref="T:Azure.Identity.AuthenticationRecord"/> which can be used to silently authenticate the account.</returns>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.AuthenticateAsync(System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The result of the authentication request, containing the acquired <see cref="T:Azure.Core.AccessToken"/>, and the <see cref="T:Azure.Identity.AuthenticationRecord"/> which can be used to silently authenticate the account.</returns>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.Authenticate(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.AuthenticateAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Interactively authenticates a user via the default browser.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> token for a user account silently if the user has already authenticated, otherwise the default browser is launched to authenticate the user. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.InteractiveBrowserCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> token for a user account silently if the user has already authenticated, otherwise the default browser is launched to authenticate the user. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.InteractiveBrowserCredentialOptions">
            <summary>
            Options to configure the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.DisableAutomaticAuthentication">
            <summary>
            Prevents the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> from automatically prompting the user. If automatic authentication is disabled a AuthenticationRequiredException will be thrown from <see cref="M:Azure.Identity.InteractiveBrowserCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> and <see cref="M:Azure.Identity.InteractiveBrowserCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)"/> in the case that
            user interaction is necessary. The application is responsible for handling this exception, and calling <see cref="M:Azure.Identity.InteractiveBrowserCredential.Authenticate(System.Threading.CancellationToken)"/> or <see cref="M:Azure.Identity.InteractiveBrowserCredential.AuthenticateAsync(System.Threading.CancellationToken)"/> to authenticate the user interactively.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.TenantId">
            <summary>
            The tenant ID the user will be authenticated to. If not specified the user will be authenticated to the home tenant.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.ClientId">
            <summary>
            The client ID of the application used to authenticate the user. If not specified the user will be authenticated with an Azure development application.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.EnablePersistentCache">
            <summary>
            If set to true the credential will store tokens in a cache persisted to the machine, protected to the current user, which can be shared by other credentials and processes.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.RedirectUri">
            <summary>
            Uri where the STS will call back the application with the security token. This parameter is not required if the caller is not using a custom <see cref="P:Azure.Identity.InteractiveBrowserCredentialOptions.ClientId"/>. In
            the case that the caller is using their own <see cref="P:Azure.Identity.InteractiveBrowserCredentialOptions.ClientId"/> the value must match the redirect url specified when creating the application registration.
            </summary>
        </member>
        <member name="P:Azure.Identity.InteractiveBrowserCredentialOptions.AuthenticationRecord">
            <summary>
            The <see cref="T:Azure.Identity.AuthenticationRecord"/> captured from a previous authentication.
            </summary>
        </member>
        <member name="T:Azure.Identity.LightweightPkcs8Decoder">
             <summary>
             This is a very targeted PKCS#8 decoder for use when reading a PKCS# encoded RSA private key from an
             DER encoded ASN.1 blob. In an ideal world, we would be able to call AsymmetricAlgorithm.ImportPkcs8PrivateKey
             off an RSA object to import the private key from a byte array, which we got from the PEM file. There
             are a few issues with this however:
            
             1. ImportPkcs8PrivateKey does not exist in the Desktop .NET Framework as of today.
             2. ImportPkcs8PrivateKey was added to .NET Core in 3.0, and we'd love to be able to support this
                on older versions of .NET Core.
            
             This code is able to decode RSA keys (without any attributes) from well formed PKCS#8 blobs.
             </summary>
        </member>
        <member name="T:Azure.Identity.ManagedIdentityCredential">
            <summary>
            Attempts authentication using a managed identity that has been assigned to the deployment environment. This authentication type works in Azure VMs,
            App Service and Azure Functions applications, as well as the Azure Cloud Shell. More information about configuring managed identities can be found here:
            https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview
            </summary>
        </member>
        <member name="M:Azure.Identity.ManagedIdentityCredential.#ctor">
            <summary>
            Protected constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Identity.ManagedIdentityCredential.#ctor(System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the ManagedIdentityCredential capable of authenticating a resource with a managed identity.
            </summary>
            <param name="clientId">
            The client id to authenticate for a user assigned managed identity.  More information on user assigned managed identities can be found here:
            https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview#how-a-user-assigned-managed-identity-works-with-an-azure-vm
            </param>
            <param name="options">Options to configure the management of the requests sent to the Azure Active Directory service.</param>
        </member>
        <member name="M:Azure.Identity.ManagedIdentityCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> from the Managed Identity service if available. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls, or a default <see cref="T:Azure.Core.AccessToken"/> if no managed identity is available.</returns>
        </member>
        <member name="M:Azure.Identity.ManagedIdentityCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> from the Managed Identity service if available. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls, or a default <see cref="T:Azure.Core.AccessToken"/> if no managed identity is available.</returns>
        </member>
        <member name="M:Azure.Identity.MsalClientBase`1.#ctor">
            <summary>
            For mocking purposes only.
            </summary>
        </member>
        <member name="M:Azure.Identity.MsalConfidentialClient.#ctor">
            <summary>
            For mocking purposes only.
            </summary>
        </member>
        <member name="T:Azure.Identity.SharedTokenCacheCredential">
            <summary>
            Authenticates using tokens in the local cache shared between Microsoft applications.
            </summary>
        </member>
        <member name="M:Azure.Identity.SharedTokenCacheCredential.#ctor">
            <summary>
            Creates a new <see cref="T:Azure.Identity.SharedTokenCacheCredential"/> which will authenticate users signed in through developer tools supporting Azure single sign on.
            </summary>
        </member>
        <member name="M:Azure.Identity.SharedTokenCacheCredential.#ctor(Azure.Identity.SharedTokenCacheCredentialOptions)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.SharedTokenCacheCredential"/> which will authenticate users signed in through developer tools supporting Azure single sign on.
            </summary>
            <param name="options">The client options for the newly created <see cref="T:Azure.Identity.SharedTokenCacheCredential"/></param>
        </member>
        <member name="M:Azure.Identity.SharedTokenCacheCredential.#ctor(System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates a new <see cref="T:Azure.Identity.SharedTokenCacheCredential"/> which will authenticate users signed in through developer tools supporting Azure single sign on.
            </summary>
            <param name="username">The username of the user to authenticate</param>
            <param name="options">The client options for the newly created <see cref="T:Azure.Identity.SharedTokenCacheCredential"/></param>
        </member>
        <member name="M:Azure.Identity.SharedTokenCacheCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> token for a user account silently if the user has already authenticated to another Microsoft application participating in SSO through a shared MSAL cache. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls</returns>
        </member>
        <member name="M:Azure.Identity.SharedTokenCacheCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains an <see cref="T:Azure.Core.AccessToken"/> token for a user account silently if the user has already authenticated to another Microsoft application participating in SSO through a shared MSAL cache. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls</returns>
        </member>
        <member name="T:Azure.Identity.SharedTokenCacheCredentialOptions">
            <summary>
            Options to configure the <see cref="T:Azure.Identity.SharedTokenCacheCredential"/> authentication.
            </summary>
        </member>
        <member name="P:Azure.Identity.SharedTokenCacheCredentialOptions.Username">
            <summary>
            Specifies the preferred authentication account username, or UPN, to be retrieved from the shared token cache for single sign on authentication with
            development tools, in the case multiple accounts are found in the shared token.
            </summary>
        </member>
        <member name="P:Azure.Identity.SharedTokenCacheCredentialOptions.TenantId">
            <summary>
            Specifies the tenant id of the preferred authentication account, to be retrieved from the shared token cache for single sign on authentication with
            development tools, in the case multiple accounts are found in the shared token.
            </summary>
        </member>
        <member name="P:Azure.Identity.SharedTokenCacheCredentialOptions.AuthenticationRecord">
            <summary>
            The <see cref="T:Azure.Identity.AuthenticationRecord"/> captured from a previous authentication with an interactive credential, such as the <see cref="T:Azure.Identity.InteractiveBrowserCredential"/> or <see cref="T:Azure.Identity.DeviceCodeCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.SharedTokenCacheCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="T:Azure.Identity.TokenCredentialOptions">
            <summary>
            Options to configure requests made to the OAUTH identity service.
            </summary>
        </member>
        <member name="P:Azure.Identity.TokenCredentialOptions.AuthorityHost">
            <summary>
            The host of the Azure Active Directory authority. The default is https://login.microsoftonline.com/. For well known authority hosts for Azure cloud instances see <see cref="T:Azure.Identity.AzureAuthorityHosts"/>.
            </summary>
        </member>
        <member name="T:Azure.Identity.UsernamePasswordCredential">
            <summary>
             Enables authentication to Azure Active Directory using a user's username and password. If the user has MFA enabled this
             credential will fail to get a token throwing an <see cref="T:Azure.Identity.AuthenticationFailedException"/>. Also, this credential requires a high degree of
             trust and is not recommended outside of prototyping when more secure credentials can be used.
            </summary>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.#ctor">
            <summary>
            Protected constructor for mocking
            </summary>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Azure.Identity.UsernamePasswordCredential"/> with the details needed to authenticate against Azure Active Directory with a simple username
            and password.
            </summary>
            <param name="username">The user account's username, also known as UPN.</param>
            <param name="password">The user account's password.</param>
            <param name="tenantId">The Azure Active Directory tenant (directory) ID or name.</param>
            <param name="clientId">The client (application) ID of an App Registration in the tenant.</param>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.#ctor(System.String,System.String,System.String,System.String,Azure.Identity.TokenCredentialOptions)">
            <summary>
            Creates an instance of the <see cref="T:Azure.Identity.UsernamePasswordCredential"/> with the details needed to authenticate against Azure Active Directory with a simple username
            and password.
            </summary>
            <param name="username">The user account's user name, UPN.</param>
            <param name="password">The user account's password.</param>
            <param name="tenantId">The Azure Active Directory tenant (directory) ID or name.</param>
            <param name="clientId">The client (application) ID of an App Registration in the tenant.</param>
            <param name="options">The client options for the newly created UsernamePasswordCredential</param>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.#ctor(System.String,System.String,System.String,System.String,Azure.Identity.UsernamePasswordCredentialOptions)">
            <summary>
            Creates an instance of the <see cref="T:Azure.Identity.UsernamePasswordCredential"/> with the details needed to authenticate against Azure Active Directory with a simple username
            and password.
            </summary>
            <param name="username">The user account's user name, UPN.</param>
            <param name="password">The user account's password.</param>
            <param name="tenantId">The Azure Active Directory tenant (directory) ID or name.</param>
            <param name="clientId">The client (application) ID of an App Registration in the tenant.</param>
            <param name="options">The client options for the newly created UsernamePasswordCredential</param>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.Authenticate(System.Threading.CancellationToken)">
            <summary>
            Authenticates the user using the specified username and password.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.AuthenticateAsync(System.Threading.CancellationToken)">
            <summary>
            Authenticates the user using the specified username and password.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.Authenticate(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Authenticates the user using the specified username and password.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.AuthenticateAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Authenticates the user using the specified username and password.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <param name="requestContext">The details of the authentication request.</param>
            <returns>The <see cref="T:Azure.Identity.AuthenticationRecord"/> of the authenticated account.</returns>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token for a user account, authenticating them using the given username and password.  Note: This will fail with
            an <see cref="T:Azure.Identity.AuthenticationFailedException"/> if the specified user account has MFA enabled. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="M:Azure.Identity.UsernamePasswordCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <summary>
            Obtains a token for a user account, authenticating them using the given username and password.  Note: This will fail with
            an <see cref="T:Azure.Identity.AuthenticationFailedException"/> if the specified user account has MFA enabled. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing.
            </summary>
            <param name="requestContext">The details of the authentication request.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> controlling the request lifetime.</param>
            <returns>An <see cref="T:Azure.Core.AccessToken"/> which can be used to authenticate service client calls.</returns>
        </member>
        <member name="T:Azure.Identity.UsernamePasswordCredentialOptions">
            <summary>
            Options to configure the <see cref="T:Azure.Identity.UsernamePasswordCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.UsernamePasswordCredentialOptions.EnablePersistentCache">
            <summary>
            If set to true the credential will store tokens in a persistent cache shared by other user credentials.
            </summary>
        </member>
        <member name="P:Azure.Identity.UsernamePasswordCredentialOptions.AllowUnencryptedCache">
            <summary>
            If set to true the credential will fall back to storing tokens in an unencrypted file if no OS level user encryption is available.
            </summary>
        </member>
        <member name="M:Azure.Identity.Validations.ValidateTenantId(System.String,System.String,System.Boolean)">
            <summary>
            As tenant id is used in constructing authority endpoints and in command line invocation we validate the character set of the tenant id matches allowed characters.
            </summary>
        </member>
        <member name="T:Azure.Identity.VisualStudioCodeCredential">
            <summary>
            Enables authentication to Azure Active Directory using data from Visual Studio Code.
            </summary>
        </member>
        <member name="M:Azure.Identity.VisualStudioCodeCredential.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Identity.VisualStudioCodeCredential"/>.
            </summary>
        </member>
        <member name="M:Azure.Identity.VisualStudioCodeCredential.#ctor(Azure.Identity.VisualStudioCodeCredentialOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Identity.VisualStudioCodeCredential"/> with the specified options.
            </summary>
            <param name="options">Options for configuring the credential.</param>
        </member>
        <member name="M:Azure.Identity.VisualStudioCodeCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.Identity.VisualStudioCodeCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.Identity.VisualStudioCodeCredentialOptions">
            <summary>
            Options for configuring the <see cref="T:Azure.Identity.VisualStudioCodeCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.VisualStudioCodeCredentialOptions.TenantId">
            <summary>
            The tenant ID the user will be authenticated to. If not specified the user will be authenticated to the tenant the user originally authenticated to via the Visual Studio Code Azure Account plugin.
            </summary>
        </member>
        <member name="T:Azure.Identity.VisualStudioCredential">
            <summary>
            Enables authentication to Azure Active Directory using data from Visual Studio
            </summary>
        </member>
        <member name="M:Azure.Identity.VisualStudioCredential.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Identity.VisualStudioCredential"/>.
            </summary>
        </member>
        <member name="M:Azure.Identity.VisualStudioCredential.#ctor(Azure.Identity.VisualStudioCredentialOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Identity.VisualStudioCredential"/> with the specified options.
            </summary>
            <param name="options">Options for configuring the credential.</param>
        </member>
        <member name="M:Azure.Identity.VisualStudioCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Azure.Identity.VisualStudioCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Azure.Identity.VisualStudioCredentialOptions">
            <summary>
            Options for configuring the <see cref="T:Azure.Identity.VisualStudioCredential"/>.
            </summary>
        </member>
        <member name="P:Azure.Identity.VisualStudioCredentialOptions.TenantId">
            <summary>
            The tenant ID the user will be authenticated to. If not specified the user will be authenticated to their home tenant.
            </summary>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument"/> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value"/> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value"/> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value"/> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value"/> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value"/> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value"/> is the default value for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1"/>.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is the default value for type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value"/> is less than the <paramref name="minimum"/> or greater than the <paramref name="maximum"/>.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T"/> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1"/>, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1"/>, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity"/> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1"/> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1"/> that <paramref name="count"/> amount of data was written to the output <see cref="T:System.Span`1"/>/<see cref="T:System.Memory`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            HACK HACK HACK. Some runtime environments like Azure.Functions downgrade System.Diagnostic.DiagnosticSource package version causing method not found exceptions in customer apps
            This type is a temporary workaround to avoid the issue.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1"/> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1"/> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator"/> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
    </members>
</doc>
